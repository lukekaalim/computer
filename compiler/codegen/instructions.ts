import { Core, RegisterID, Word } from "isa"

/**
 * Group a set of instructions together
 */
export type InstructionGroup = {
  id: string,
  start_index: number,
  end_index: number,
};

/**
 * Instructions generated by codegen include special
 * "glue" instructions that are resolved by the linker,
 * as well as "label" properties that globally identifies
 * instruction addresses
 */
export type CodegenInstruction = (
  | Core.Instruction
  | { type: 'linker.load_var', variable_id: string, dest: RegisterID }
  | { type: 'linker.island', instructions: CodegenInstruction[] }
  | { type: 'linker.group', instructions: CodegenInstruction[], group_id: string }
) & { label?: string }

export type VariableMap = {
  vars: Map<string, Word>,
  labels: Map<string, Word>,
}

export const label = <T extends CodegenInstruction>(instruction: T, label: string): T => ({
  ...instruction,
  label
})

export const island = (instructions: CodegenInstruction[]): CodegenInstruction => ({
  type: 'linker.island',
  instructions
});

export const group = (instructions: CodegenInstruction[], group_id: string): CodegenInstruction => ({
  type: 'linker.group',
  instructions,
  group_id
});


export const loadVar = (variable_id: string, dest: RegisterID): CodegenInstruction => ({
  type: 'linker.load_var',
  variable_id,
  dest
});
